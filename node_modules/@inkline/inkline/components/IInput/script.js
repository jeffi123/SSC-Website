"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _helpers = require("@inkline/inkline/helpers");

var _mixins = require("@inkline/inkline/mixins");

const componentName = "IInput";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  mixins: [_mixins.FormComponentMixin],
  inheritAttrs: false,
  props: {
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    clearable: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    error: {
      type: [Array, Boolean],
      default: () => ["touched", "dirty", "invalid"]
    },
    id: {
      type: String,
      default: void 0
    },
    modelValue: {
      type: [String, Number],
      default: ""
    },
    name: {
      type: [String, Number],

      default() {
        return (0, _helpers.uid)("input");
      }

    },
    plaintext: {
      type: Boolean,
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    tabindex: {
      type: [Number, String],
      default: 0
    },
    type: {
      type: String,
      default: "text"
    },
    clearAriaLabel: {
      type: String,
      default: "Clear"
    }
  },
  emits: ["update:modelValue", "clear"],
  computed: {
    classes() {
      return { ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size),
        "-disabled": this.isDisabled,
        "-error": this.hasError,
        "-readonly": this.isReadonly,
        "-prefixed": Boolean(this.$slots.prefix),
        "-suffixed": Boolean(this.$slots.suffix),
        "-prepended": Boolean(this.$slots.prepend),
        "-appended": Boolean(this.$slots.append)
      };
    },

    hasError() {
      if (typeof this.error === "boolean") {
        return this.error;
      } else if (this.schema && this.error) {
        let visible = true;
        [].concat(this.error).forEach(status => {
          visible = visible && this.schema[status];
        });
        return visible;
      }

      return false;
    },

    tabIndex() {
      return this.isDisabled ? -1 : this.tabindex;
    },

    isClearable() {
      return this.clearable && !this.isDisabled && !this.isReadonly && this.value !== "";
    },

    value() {
      if (this.schema) {
        return this.schema.value;
      }

      return this.modelValue;
    }

  },
  methods: {
    onBlur(event) {
      this.parent.onBlur?.(this.name, event);
    },

    onInput(event) {
      this.parent.onInput?.(this.name, event.target.value);
      this.$emit("update:modelValue", event.target.value);
    },

    onClear(event) {
      this.$emit("update:modelValue", "");
      this.$emit("clear", event);
    },

    focus() {
      this.$refs.input.focus();
    }

  }
});

module.exports = _default;