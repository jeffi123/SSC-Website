"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _helpers = require("@inkline/inkline/helpers");

var _mixins = require("@inkline/inkline/mixins");

const componentName = "ICheckbox";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  mixins: [_mixins.FormComponentMixin],
  props: {
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    value: {
      default: false
    },
    modelValue: {
      default: false
    },
    name: {
      type: [String, Number],

      default() {
        return (0, _helpers.uid)("checkbox");
      }

    },
    native: {
      type: Boolean,
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    tabindex: {
      type: [Number, String],
      default: 0
    }
  },
  emits: ["update:modelValue"],
  computed: {
    classes() {
      return { ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size),
        "-disabled": this.isDisabled,
        "-readonly": this.isReadonly,
        "-native": this.native
      };
    },

    checked() {
      if (this.formGroup.checked) {
        return this.formGroup.checked.includes(this.value);
      }

      if (this.schema) {
        return this.schema.value;
      }

      return this.modelValue;
    },

    tabIndex() {
      return this.isDisabled ? -1 : this.tabindex;
    }

  },
  methods: {
    clickInputRef() {
      if (this.isReadonly) {
        return;
      }

      this.$refs.input.click();
    },

    onChange(event) {
      this.parent.onInput?.(this.name, event.target.checked);
      this.formGroup.onChange?.(this.value);
      this.$emit("update:modelValue", event.target.checked);
    },

    onBlur(event) {
      this.parent.onBlur?.(this.name, event);
    }

  }
});

module.exports = _default;