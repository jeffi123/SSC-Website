import { defineComponent } from "vue";
import { uid } from "@inkline/inkline/helpers";
import {
  colorVariantClass,
  sizePropValidator,
  FormComponentMixin,
  defaultPropValue
} from "@inkline/inkline/mixins";
const componentName = "ICheckbox";
export default defineComponent({
  name: componentName,
  mixins: [
    FormComponentMixin
  ],
  props: {
    color: {
      type: String,
      default: defaultPropValue(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    value: {
      default: false
    },
    modelValue: {
      default: false
    },
    name: {
      type: [String, Number],
      default() {
        return uid("checkbox");
      }
    },
    native: {
      type: Boolean,
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: defaultPropValue(componentName, "size"),
      validator: sizePropValidator
    },
    tabindex: {
      type: [Number, String],
      default: 0
    }
  },
  emits: [
    "update:modelValue"
  ],
  computed: {
    classes() {
      return {
        ...colorVariantClass(this),
        [`-${this.size}`]: Boolean(this.size),
        "-disabled": this.isDisabled,
        "-readonly": this.isReadonly,
        "-native": this.native
      };
    },
    checked() {
      if (this.formGroup.checked) {
        return this.formGroup.checked.includes(this.value);
      }
      if (this.schema) {
        return this.schema.value;
      }
      return this.modelValue;
    },
    tabIndex() {
      return this.isDisabled ? -1 : this.tabindex;
    }
  },
  methods: {
    clickInputRef() {
      if (this.isReadonly) {
        return;
      }
      this.$refs.input.click();
    },
    onChange(event) {
      this.parent.onInput?.(this.name, event.target.checked);
      this.formGroup.onChange?.(this.value);
      this.$emit("update:modelValue", event.target.checked);
    },
    onBlur(event) {
      this.parent.onBlur?.(this.name, event);
    }
  }
});
