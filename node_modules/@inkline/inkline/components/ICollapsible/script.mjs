import { defineComponent } from "vue";
import {
  colorVariantClass,
  defaultPropValue,
  sizePropValidator
} from "@inkline/inkline/mixins";
const componentName = "ICollapsible";
export default defineComponent({
  name: componentName,
  provide() {
    return {
      collapsible: this
    };
  },
  props: {
    accordion: {
      type: Boolean,
      default: false
    },
    color: {
      type: String,
      default: defaultPropValue(componentName, "color")
    },
    size: {
      type: String,
      default: defaultPropValue(componentName, "size"),
      validator: sizePropValidator
    },
    modelValue: {
      type: Array,
      default: () => []
    }
  },
  emits: [
    "update:modelValue"
  ],
  data() {
    return {
      activeItems: [].concat(this.modelValue)
    };
  },
  computed: {
    classes() {
      return {
        ...colorVariantClass(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }
  },
  watch: {
    modelValue(value) {
      this.activeItems = [].concat(value);
    }
  },
  methods: {
    onItemClick(item) {
      if (this.accordion) {
        this.activeItems = this.activeItems.indexOf(item.name) > -1 ? [] : [item.name];
        return this.activeItems;
      }
      const index = this.activeItems.indexOf(item.name);
      if (index > -1) {
        this.activeItems.splice(index, 1);
      } else {
        this.activeItems.push(item.name);
      }
      this.$emit("update:modelValue", this.activeItems);
    }
  }
});
