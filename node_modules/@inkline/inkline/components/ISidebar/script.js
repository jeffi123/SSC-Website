"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _mixins = require("@inkline/inkline/mixins");

const componentName = "ISidebar";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  mixins: [_mixins.CollapsibleMixin],

  provide() {
    return {
      sidebar: this
    };
  },

  props: {
    ariaLabel: {
      type: String,
      default: "Sidebar"
    },
    collapseOnItemClick: {
      type: Boolean,
      default: true
    },
    collapseOnClickOutside: {
      type: Boolean,
      default: true
    },
    collapsePosition: {
      type: String,
      default: "absolute"
    },
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    placement: {
      type: String,
      default: "left"
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    }
  },
  emits: ["update:modelValue"],
  computed: {
    classes() {
      return { ...this.collapsibleClasses,
        ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size),
        [`-collapse-${this.collapsePosition}`]: true,
        [`-placement-${this.placement}`]: true
      };
    },

    sidebarWrapperTransition() {
      return this.collapsePosition !== "relative" ? "sidebar-wrapper-none-transition" : "sidebar-wrapper-transition";
    },

    sidebarTransition() {
      return this.collapsePosition !== "relative" ? "sidebar-transition" : "sidebar-none-transition";
    }

  },
  methods: {
    onItemClick() {
      if (this.collapseOnItemClick && this.open) {
        this.setOpen(false);
      }
    },

    onOverlayClick() {
      if (this.collapseOnClickOutside && this.open) {
        this.setOpen(false);
      }
    }

  }
});

module.exports = _default;