"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _index = _interopRequireDefault(require("@inkline/inkline/components/IButton/index.vue"));

var _index2 = _interopRequireDefault(require("@inkline/inkline/components/IInput/index.vue"));

var _helpers = require("@inkline/inkline/helpers");

var _mixins = require("@inkline/inkline/mixins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const componentName = "INumberInput";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  components: {
    IButton: _index.default
  },
  extends: _index2.default,
  props: {
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    clearable: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    id: {
      type: String,
      default: ""
    },
    modelValue: {
      type: [String, Number],
      default: ""
    },
    name: {
      type: [String, Number],

      default() {
        return (0, _helpers.uid)("input");
      }

    },
    readonly: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    tabindex: {
      type: [Number, String],
      default: 0
    },
    min: {
      type: [Number, String],
      default: -Infinity
    },
    max: {
      type: [Number, String],
      default: Infinity
    },
    precision: {
      type: Number,
      default: 0
    },
    step: {
      type: Number,
      default: 1
    }
  },
  emits: ["update:modelValue"],
  watch: {
    modelValue: {
      immediate: true,

      handler(value) {
        let newValue = (value || "").toString().replace(/^[^0-9-]/, "").replace(/^(-)[^0-9]/, "$1").replace(new RegExp(`^(-?[0-9]+)[^0-9${this.precision > 0 ? "." : ""}]`), "$1");

        if (this.precision > 0) {
          newValue = newValue.replace(/^(-?[0-9]+\.)[^0-9]/, "$1").replace(new RegExp(`^(-?[0-9]+\\.[0-9]{0,${this.precision}}).*`), "$1");
        }

        if (parseFloat(newValue) >= parseFloat(this.max)) newValue = this.max.toString();
        if (parseFloat(newValue) <= parseFloat(this.min)) newValue = this.min.toString();
        this.parent.onInput?.(this.name, newValue);
        this.$emit("update:modelValue", newValue);
      }

    }
  },
  methods: {
    decrease() {
      this.$emit("update:modelValue", this.formatPrecision((Number(this.modelValue) - this.step).toString()));
    },

    increase() {
      this.$emit("update:modelValue", this.formatPrecision((Number(this.modelValue) + this.step).toString()));
    },

    formatPrecision(value) {
      const parts = value.split(".");
      let decimals = parts[1] || "";

      for (let i = decimals.length; i < this.precision; i += 1) {
        decimals += "0";
      }

      return this.precision > 0 ? `${parts[0]}.${decimals}` : parts[0];
    },

    onBlurFormatPrecision(event) {
      this.$emit("update:modelValue", this.formatPrecision(Number(this.modelValue).toString()));
      this.parent.onBlur?.(this.name, event);
    }

  }
});

module.exports = _default;