import { defineComponent } from "vue";
import {
  getValueByPath,
  setValueByPath,
  setValuesAlongPath,
  clone,
  uid
} from "@inkline/inkline/helpers";
import {
  colorVariantClass,
  defaultPropValue,
  sizePropValidator,
  FormComponentMixin
} from "@inkline/inkline/mixins";
import { validate } from "@inkline/inkline/validation";
const componentName = "IForm";
export default defineComponent({
  name: componentName,
  mixins: [
    FormComponentMixin
  ],
  provide() {
    return {
      form: this
    };
  },
  inheritAttrs: false,
  props: {
    color: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    inline: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    name: {
      type: String,
      default() {
        return uid("form");
      }
    },
    modelValue: {
      type: Object,
      default: () => null
    },
    readonly: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: defaultPropValue(componentName, "size"),
      validator: sizePropValidator
    }
  },
  emits: [
    "update:modelValue",
    "submit"
  ],
  computed: {
    classes() {
      return {
        ...colorVariantClass(this),
        [`-${this.size}`]: Boolean(this.size),
        "-disabled": this.isDisabled,
        "-readonly": this.isReadonly,
        "-inline": this.inline
      };
    },
    schema() {
      if (this.modelValue) {
        return this.modelValue;
      }
      return getValueByPath(this.formGroup.schema || this.form.schema || {}, this.name);
    }
  },
  methods: {
    onBlur(name, event) {
      this.parent.onBlur?.(this.name ? `${this.name}.${name}` : name, event);
      if (this.modelValue) {
        let schema = clone(this.modelValue);
        schema = setValuesAlongPath(schema, name, { untouched: false, touched: true });
        if (this.shouldValidate(name, "blur")) {
          schema = validate(schema);
        }
        this.$emit("update:modelValue", schema);
      }
    },
    onInput(name, value) {
      this.parent.onInput?.(this.name ? `${this.name}.${name}` : name, value);
      if (this.modelValue) {
        let schema = clone(this.modelValue);
        schema = setValueByPath(schema, name, "value", value);
        schema = setValuesAlongPath(schema, name, { pristine: false, dirty: true });
        if (this.shouldValidate(name, "input")) {
          schema = validate(schema);
        }
        this.$emit("update:modelValue", schema);
      }
    },
    onSubmit(event) {
      event.preventDefault();
      if (this.modelValue) {
        let schema = clone(this.modelValue);
        schema = setValuesAlongPath(validate(schema), "", { untouched: false, touched: true });
        this.$emit("update:modelValue", schema);
        if (schema.invalid) {
          return;
        }
      }
      this.$emit("submit", event);
    },
    shouldValidate(path, eventName) {
      const targetSchema = getValueByPath(this.modelValue, path);
      const events = targetSchema.validateOn ? [].concat(targetSchema.validateOn) : this.$inkline.options.validateOn;
      return events.includes(eventName);
    }
  }
});
