"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _helpers = require("@inkline/inkline/helpers");

var _controllers = require("@inkline/inkline/controllers");

var _mixins = require("@inkline/inkline/mixins");

var _directives = require("@inkline/inkline/directives");

const componentName = "IModal";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  directives: {
    ClickOutside: _directives.ClickOutside
  },
  props: {
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    closeAriaLabel: {
      type: String,
      default: "Close"
    },
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    hideOnClickOutside: {
      type: Boolean,
      default: true
    },
    name: {
      type: String,

      default() {
        return (0, _helpers.uid)("modal");
      }

    },
    showClose: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    modelValue: {
      type: Boolean,
      default: false
    },
    transition: {
      type: String,
      default: "zoom-in-center-transition"
    }
  },
  emits: ["update:modelValue"],

  data() {
    return {
      visible: this.modelValue
    };
  },

  computed: {
    classes() {
      return {
        "-disabled": this.disabled,
        ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }

  },
  watch: {
    modelValue(value) {
      if (value) {
        this.show();
      } else {
        this.hide();
      }
    }

  },

  mounted() {
    _controllers.OverlayController.register(this);
  },

  unmounted() {
    _controllers.OverlayController.unregister(this);
  },

  methods: {
    show() {
      if (this.disabled) {
        return;
      }

      this.visible = true;
      this.$emit("update:modelValue", true);

      _controllers.OverlayController.open(this.name);

      if (typeof window !== "undefined") {
        (0, _helpers.addClass)(window.document.body, "-modal");
      }
    },

    hide() {
      if (this.disabled) {
        return;
      }

      this.visible = false;
      this.$emit("update:modelValue", false);

      _controllers.OverlayController.close(this.name);

      if (typeof window !== "undefined") {
        (0, _helpers.removeClass)(window.document.body, "-modal");
      }
    },

    onClickOutside() {
      if (!this.hideOnClickOutside) {
        return;
      }

      this.hide();
    }

  }
});

module.exports = _default;