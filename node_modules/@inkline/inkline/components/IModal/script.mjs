import { defineComponent } from "vue";
import { addClass, removeClass, uid } from "@inkline/inkline/helpers";
import { OverlayController } from "@inkline/inkline/controllers";
import {
  defaultPropValue,
  colorVariantClass,
  sizePropValidator
} from "@inkline/inkline/mixins";
import { ClickOutside } from "@inkline/inkline/directives";
const componentName = "IModal";
export default defineComponent({
  name: componentName,
  directives: {
    ClickOutside
  },
  props: {
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    closeAriaLabel: {
      type: String,
      default: "Close"
    },
    color: {
      type: String,
      default: defaultPropValue(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    hideOnClickOutside: {
      type: Boolean,
      default: true
    },
    name: {
      type: String,
      default() {
        return uid("modal");
      }
    },
    showClose: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: defaultPropValue(componentName, "size"),
      validator: sizePropValidator
    },
    modelValue: {
      type: Boolean,
      default: false
    },
    transition: {
      type: String,
      default: "zoom-in-center-transition"
    }
  },
  emits: [
    "update:modelValue"
  ],
  data() {
    return {
      visible: this.modelValue
    };
  },
  computed: {
    classes() {
      return {
        "-disabled": this.disabled,
        ...colorVariantClass(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }
  },
  watch: {
    modelValue(value) {
      if (value) {
        this.show();
      } else {
        this.hide();
      }
    }
  },
  mounted() {
    OverlayController.register(this);
  },
  unmounted() {
    OverlayController.unregister(this);
  },
  methods: {
    show() {
      if (this.disabled) {
        return;
      }
      this.visible = true;
      this.$emit("update:modelValue", true);
      OverlayController.open(this.name);
      if (typeof window !== "undefined") {
        addClass(window.document.body, "-modal");
      }
    },
    hide() {
      if (this.disabled) {
        return;
      }
      this.visible = false;
      this.$emit("update:modelValue", false);
      OverlayController.close(this.name);
      if (typeof window !== "undefined") {
        removeClass(window.document.body, "-modal");
      }
    },
    onClickOutside() {
      if (!this.hideOnClickOutside) {
        return;
      }
      this.hide();
    }
  }
});
