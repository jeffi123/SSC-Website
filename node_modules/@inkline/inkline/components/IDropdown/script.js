"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _mixins = require("@inkline/inkline/mixins");

var _directives = require("@inkline/inkline/directives");

var _helpers = require("@inkline/inkline/helpers");

const componentName = "IDropdown";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  directives: {
    ClickOutside: _directives.ClickOutside
  },
  mixins: [_mixins.PopupMixin, _mixins.PopupControlsMixin],

  provide() {
    return {
      dropdown: this
    };
  },

  inject: {
    navbar: {
      default: () => ({
        onItemClick: () => {}
      })
    },
    sidebar: {
      default: () => ({
        onItemClick: () => {}
      })
    }
  },
  props: {
    animationDuration: {
      type: Number,
      default: 300
    },
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    hideOnItemClick: {
      type: Boolean,
      default: true
    },
    keydownTrigger: {
      type: Array,
      default: () => ["up", "down", "enter", "space", "tab", "esc"]
    },
    keydownItem: {
      type: Array,
      default: () => ["up", "down", "enter", "space", "tab", "esc"]
    },
    modelValue: {
      type: Boolean,
      default: false
    },
    arrow: {
      type: Boolean,
      default: true
    },
    placement: {
      type: String,
      default: "bottom"
    },
    trigger: {
      type: [String, Array],
      default: () => ["click"]
    },
    offset: {
      type: Number,
      default: 6
    },
    interactable: {
      type: Boolean,
      default: true
    },
    popperOptions: {
      type: Object,
      default: () => ({})
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    }
  },
  emits: ["click-outside", "update:modelValue"],
  computed: {
    classes() {
      return { ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }

  },

  mounted() {
    for (const child of this.$refs.trigger.children) {
      (0, _helpers.on)(child, "keydown", this.onTriggerKeyDown);
    }

    (0, _helpers.on)(this.$refs.popup, "keydown", this.onItemKeyDown);
  },

  beforeUnmount() {
    for (const child of this.$refs.trigger.children) {
      (0, _helpers.off)(child, "keydown", this.onTriggerKeyDown);
    }

    (0, _helpers.off)(this.$refs.popup, "keydown", this.onItemKeyDown);
  },

  methods: {
    onEscape() {
      this.visible = false;
      this.$emit("update:modelValue", false);
    },

    handleClickOutside() {
      this.visible = false;
      this.$emit("update:modelValue", false);
      this.onClickOutside();
    },

    getFocusableItems() {
      const focusableItems = [];

      for (const child of this.$refs.body.children) {
        if ((0, _helpers.isFocusable)(child)) {
          focusableItems.push(child);
        }
      }

      return focusableItems;
    },

    onTriggerKeyDown(event) {
      if (this.keydownTrigger.length === 0) {
        return;
      }

      const focusableItems = this.getFocusableItems();
      const activeIndex = focusableItems.findIndex(item => item.active);
      const initialIndex = activeIndex > -1 ? activeIndex : 0;
      const focusTarget = focusableItems[initialIndex];

      switch (true) {
        case (0, _helpers.isKey)("up", event) && this.keydownTrigger.includes("up"):
        case (0, _helpers.isKey)("down", event) && this.keydownTrigger.includes("down"):
          this.show();
          setTimeout(() => {
            focusTarget.focus();
          }, this.visible ? 0 : this.animationDuration);
          event.preventDefault();
          event.stopPropagation();
          break;

        case (0, _helpers.isKey)("enter", event) && this.keydownTrigger.includes("enter"):
        case (0, _helpers.isKey)("space", event) && this.keydownTrigger.includes("space"):
          this.onClick();

          if (!this.visible) {
            setTimeout(() => {
              focusTarget.focus();
            }, this.animationDuration);
          }

          event.preventDefault();
          break;

        case (0, _helpers.isKey)("tab", event) && this.keydownTrigger.includes("tab"):
        case (0, _helpers.isKey)("esc", event) && this.keydownTrigger.includes("esc"):
          this.hide();
          break;
      }
    },

    onItemKeyDown(event) {
      if (this.keydownItem.length === 0) {
        return;
      }

      switch (true) {
        case (0, _helpers.isKey)("up", event) && this.keydownItem.includes("up"):
        case (0, _helpers.isKey)("down", event) && this.keydownItem.includes("down"):
          const focusableItems = this.getFocusableItems();
          const currentIndex = focusableItems.findIndex(item => item === event.target);
          const maxIndex = focusableItems.length - 1;
          let nextIndex;

          if ((0, _helpers.isKey)("up", event)) {
            nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;
          } else {
            nextIndex = currentIndex < maxIndex ? currentIndex + 1 : maxIndex;
          }

          focusableItems[nextIndex].focus();
          event.preventDefault();
          event.stopPropagation();
          break;

        case (0, _helpers.isKey)("enter", event) && this.keydownItem.includes("enter"):
        case (0, _helpers.isKey)("space", event) && this.keydownItem.includes("space"):
          event.target.click();

          if (this.hideOnItemClick) {
            this.hide();
          }

          this.focusTrigger();
          event.preventDefault();
          break;

        case (0, _helpers.isKey)("tab", event) && this.keydownItem.includes("tab"):
        case (0, _helpers.isKey)("esc", event) && this.keydownItem.includes("esc"):
          this.hide();
          this.focusTrigger();
          event.preventDefault();
          break;
      }
    },

    onItemClick() {
      if (this.hideOnItemClick) {
        this.hide();
      }

      [this.navbar, this.sidebar].forEach(parent => {
        parent.onItemClick();
      });
    }

  }
});

module.exports = _default;