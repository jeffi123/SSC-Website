import { defineComponent } from "vue";
import {
  PopupMixin,
  PopupControlsMixin,
  sizePropValidator,
  colorVariantClass,
  defaultPropValue
} from "@inkline/inkline/mixins";
import { ClickOutside } from "@inkline/inkline/directives";
import { on, off, isFocusable, isKey } from "@inkline/inkline/helpers";
const componentName = "IDropdown";
export default defineComponent({
  name: componentName,
  directives: {
    ClickOutside
  },
  mixins: [PopupMixin, PopupControlsMixin],
  provide() {
    return {
      dropdown: this
    };
  },
  inject: {
    navbar: {
      default: () => ({
        onItemClick: () => {
        }
      })
    },
    sidebar: {
      default: () => ({
        onItemClick: () => {
        }
      })
    }
  },
  props: {
    animationDuration: {
      type: Number,
      default: 300
    },
    color: {
      type: String,
      default: defaultPropValue(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    hideOnItemClick: {
      type: Boolean,
      default: true
    },
    keydownTrigger: {
      type: Array,
      default: () => [
        "up",
        "down",
        "enter",
        "space",
        "tab",
        "esc"
      ]
    },
    keydownItem: {
      type: Array,
      default: () => [
        "up",
        "down",
        "enter",
        "space",
        "tab",
        "esc"
      ]
    },
    modelValue: {
      type: Boolean,
      default: false
    },
    arrow: {
      type: Boolean,
      default: true
    },
    placement: {
      type: String,
      default: "bottom"
    },
    trigger: {
      type: [String, Array],
      default: () => ["click"]
    },
    offset: {
      type: Number,
      default: 6
    },
    interactable: {
      type: Boolean,
      default: true
    },
    popperOptions: {
      type: Object,
      default: () => ({})
    },
    size: {
      type: String,
      default: defaultPropValue(componentName, "size"),
      validator: sizePropValidator
    }
  },
  emits: [
    "click-outside",
    "update:modelValue"
  ],
  computed: {
    classes() {
      return {
        ...colorVariantClass(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    }
  },
  mounted() {
    for (const child of this.$refs.trigger.children) {
      on(child, "keydown", this.onTriggerKeyDown);
    }
    on(this.$refs.popup, "keydown", this.onItemKeyDown);
  },
  beforeUnmount() {
    for (const child of this.$refs.trigger.children) {
      off(child, "keydown", this.onTriggerKeyDown);
    }
    off(this.$refs.popup, "keydown", this.onItemKeyDown);
  },
  methods: {
    onEscape() {
      this.visible = false;
      this.$emit("update:modelValue", false);
    },
    handleClickOutside() {
      this.visible = false;
      this.$emit("update:modelValue", false);
      this.onClickOutside();
    },
    getFocusableItems() {
      const focusableItems = [];
      for (const child of this.$refs.body.children) {
        if (isFocusable(child)) {
          focusableItems.push(child);
        }
      }
      return focusableItems;
    },
    onTriggerKeyDown(event) {
      if (this.keydownTrigger.length === 0) {
        return;
      }
      const focusableItems = this.getFocusableItems();
      const activeIndex = focusableItems.findIndex((item) => item.active);
      const initialIndex = activeIndex > -1 ? activeIndex : 0;
      const focusTarget = focusableItems[initialIndex];
      switch (true) {
        case (isKey("up", event) && this.keydownTrigger.includes("up")):
        case (isKey("down", event) && this.keydownTrigger.includes("down")):
          this.show();
          setTimeout(() => {
            focusTarget.focus();
          }, this.visible ? 0 : this.animationDuration);
          event.preventDefault();
          event.stopPropagation();
          break;
        case (isKey("enter", event) && this.keydownTrigger.includes("enter")):
        case (isKey("space", event) && this.keydownTrigger.includes("space")):
          this.onClick();
          if (!this.visible) {
            setTimeout(() => {
              focusTarget.focus();
            }, this.animationDuration);
          }
          event.preventDefault();
          break;
        case (isKey("tab", event) && this.keydownTrigger.includes("tab")):
        case (isKey("esc", event) && this.keydownTrigger.includes("esc")):
          this.hide();
          break;
      }
    },
    onItemKeyDown(event) {
      if (this.keydownItem.length === 0) {
        return;
      }
      switch (true) {
        case (isKey("up", event) && this.keydownItem.includes("up")):
        case (isKey("down", event) && this.keydownItem.includes("down")):
          const focusableItems = this.getFocusableItems();
          const currentIndex = focusableItems.findIndex((item) => item === event.target);
          const maxIndex = focusableItems.length - 1;
          let nextIndex;
          if (isKey("up", event)) {
            nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;
          } else {
            nextIndex = currentIndex < maxIndex ? currentIndex + 1 : maxIndex;
          }
          focusableItems[nextIndex].focus();
          event.preventDefault();
          event.stopPropagation();
          break;
        case (isKey("enter", event) && this.keydownItem.includes("enter")):
        case (isKey("space", event) && this.keydownItem.includes("space")):
          event.target.click();
          if (this.hideOnItemClick) {
            this.hide();
          }
          this.focusTrigger();
          event.preventDefault();
          break;
        case (isKey("tab", event) && this.keydownItem.includes("tab")):
        case (isKey("esc", event) && this.keydownItem.includes("esc")):
          this.hide();
          this.focusTrigger();
          event.preventDefault();
          break;
      }
    },
    onItemClick() {
      if (this.hideOnItemClick) {
        this.hide();
      }
      [this.navbar, this.sidebar].forEach((parent) => {
        parent.onItemClick();
      });
    }
  }
});
