"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _helpers = require("@inkline/inkline/helpers");

var _mixins = require("@inkline/inkline/mixins");

var _PopupMixin = require("@inkline/inkline/mixins/PopupMixin");

var _directives = require("@inkline/inkline/directives");

var _index = _interopRequireDefault(require("@inkline/inkline/components/IInput/index.vue"));

var _index2 = _interopRequireDefault(require("@inkline/inkline/components/IIcon/index.vue"));

var _index3 = _interopRequireDefault(require("@inkline/inkline/components/IMark/index.vue"));

var _index4 = _interopRequireDefault(require("@inkline/inkline/components/ISelect/components/ISelectOption/index.vue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const componentName = "ISelect";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  directives: {
    ClickOutside: _directives.ClickOutside
  },
  components: {
    IInput: _index.default,
    IIcon: _index2.default,
    ISelectOption: _index4.default,
    IMark: _index3.default
  },
  mixins: [_mixins.FormComponentMixin, _mixins.PopupMixin],

  provide() {
    return {
      select: this
    };
  },

  props: {
    animationDuration: {
      type: Number,
      default: 300
    },
    autocomplete: {
      type: Boolean,
      default: false
    },
    arrow: {
      type: Boolean,
      default: true
    },
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    clearable: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    idField: {
      type: String,
      default: "id"
    },
    keydownTrigger: {
      type: Array,
      default: () => ["up", "down", "enter", "space", "tab", "esc"]
    },
    keydownItem: {
      type: Array,
      default: () => ["up", "down", "enter", "space", "tab", "esc"]
    },
    label: {
      type: [String, Function],
      default: "label"
    },
    loading: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: [Object, String, Number],
      default: null
    },
    minLength: {
      type: Number,
      default: 0
    },
    name: {
      type: [String, Number],
      default: () => (0, _helpers.uid)("select")
    },
    options: {
      type: Array,
      default: () => []
    },
    placeholder: {
      type: String,
      default: ""
    },
    offset: {
      type: Number,
      default: 6
    },
    placement: {
      type: String,
      default: "bottom"
    },
    popperOptions: {
      type: Object,
      default: () => ({
        modifiers: [...(0, _PopupMixin.useBaseModifiers)({
          offset: 8
        }), (0, _PopupMixin.sameWidthModifier)()]
      })
    },
    readonly: {
      type: Boolean,
      default: false
    },
    scrollTolerance: {
      type: Number,
      default: 160
    },
    selectFirstOptionOnEnter: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    },
    tabindex: {
      type: [Number, String],
      default: 0
    },
    type: {
      type: String,
      default: "text"
    },
    total: {
      type: Number,
      default: void 0
    }
  },
  emits: ["update:modelValue", "search", "pagination"],

  data() {
    return {
      animating: false,
      visible: false,
      inputValue: this.computeLabel(this.modelValue) || ""
    };
  },

  computed: {
    wrapperClasses() {
      return { ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    },

    popupClasses() {
      return {
        "-disabled": this.isDisabled,
        "-readonly": this.isReadonly
      };
    },

    tabIndex() {
      return this.isDisabled ? -1 : this.tabindex;
    },

    isClearable() {
      return this.value && this.clearable && !this.isDisabled && !this.isReadonly;
    },

    value() {
      if (this.schema) {
        return this.schema.value;
      }

      return this.modelValue;
    },

    inputPlaceholder() {
      return this.value ? this.computeLabel(this.value) : this.placeholder;
    }

  },
  watch: {
    value(value) {
      this.inputValue = this.computeLabel(value);
    },

    inputValue(value) {
      const matchesLength = this.inputMatchesLength(value);
      const matchesLabel = this.inputMatchesLabel(value);

      if (matchesLength && !matchesLabel && !this.animating) {
        this.show();
      }

      this.$emit("search", this.inputValue);
    },

    options() {
      if (this.visible) {
        this.createPopper();
      }
    }

  },
  methods: {
    onInput(option, label) {
      if (option.disabled) {
        return;
      }

      this.hide();

      if (label) {
        this.inputValue = label;
      }

      this.parent.onInput?.(this.name, option);
      this.$emit("update:modelValue", option);
    },

    onClear() {
      this.animating = true;
      this.$emit("update:modelValue", null);
      this.$nextTick(() => {
        this.animating = false;
      });
    },

    onFocus(event) {
      if (!this.value && this.options.length === 0) {
        return;
      }

      if (this.autocomplete) {
        this.inputValue = "";
      }

      const focusShouldShowSelect = !event.relatedTarget || !this.$refs.wrapper.contains(event.relatedTarget);

      if (focusShouldShowSelect && this.inputShouldShowSelect(this.inputValue)) {
        this.show();
      }
    },

    onBlur(event) {
      const blurShouldHideSelect = !event.relatedTarget || !this.$refs.wrapper.contains(event.relatedTarget);

      if (blurShouldHideSelect) {
        this.hide();
        this.inputValue = this.computeLabel(this.value);
      }

      this.parent.onBlur?.(this.name, event);
    },

    onClick() {
      if (this.autocomplete) {
        this.inputValue = "";
      }

      if (this.inputShouldShowSelect(this.inputValue)) {
        this.show();
      }
    },

    onClickOutside() {
      this.hide();
    },

    onClickCaret(event) {
      if (this.visible) {
        this.onBlur(event);
      } else {
        this.focus();
        this.onFocus(event);
      }

      event.preventDefault();
      event.stopPropagation();
    },

    onScroll() {
      if (isNaN(this.total)) {
        return;
      }

      const scrollTop = this.$refs.body.scrollTop;
      const viewportHeight = parseInt(getComputedStyle(this.$refs.body).height, 10);
      const totalHeight = parseInt(getComputedStyle(this.$refs.options).height, 10);
      const shouldLoadNextPage = scrollTop + viewportHeight > totalHeight - this.scrollTolerance;
      const endReached = this.options.length >= this.total;

      if (shouldLoadNextPage && !endReached && this.options.length > 0 && !this.loading) {
        this.$emit("pagination");
      }
    },

    onWindowResize() {
      this.onScroll();

      if (this.visible) {
        this.$nextTick().then(() => this.createPopper());
      }
    },

    onTriggerKeyDown(event) {
      if (this.keydownTrigger.length === 0) {
        return;
      }

      const focusableItems = this.getFocusableItems();
      const activeIndex = focusableItems.findIndex(item => item.active);
      const initialIndex = activeIndex > -1 ? activeIndex : 0;
      const focusTarget = focusableItems[initialIndex];

      switch (true) {
        case (0, _helpers.isKey)("up", event) && this.keydownTrigger.includes("up"):
        case (0, _helpers.isKey)("down", event) && this.keydownTrigger.includes("down"):
          this.show();
          setTimeout(() => {
            focusTarget.focus();
          }, this.visible ? 0 : this.animationDuration);
          event.preventDefault();
          event.stopPropagation();
          break;

        case (0, _helpers.isKey)("enter", event) && this.keydownTrigger.includes("enter"):
          if (this.selectFirstOptionOnEnter && (!this.value || !this.inputMatchesLabel(this.inputValue))) {
            const firstAvailableOption = this.options.find(option => !option.disabled);

            if (firstAvailableOption) {
              this.onInput(firstAvailableOption);
              this.focus();
            }
          } else {
            this.onClick();
          }

          if (!this.visible) {
            setTimeout(() => {
              focusTarget.focus();
            }, this.animationDuration);
          }

          event.preventDefault();
          break;

        case (0, _helpers.isKey)("tab", event) && this.keydownTrigger.includes("tab"):
        case (0, _helpers.isKey)("esc", event) && this.keydownTrigger.includes("esc"):
          this.hide();
          break;
      }
    },

    onItemKeyDown(event) {
      if (this.keydownItem.length === 0) {
        return;
      }

      switch (true) {
        case (0, _helpers.isKey)("up", event) && this.keydownItem.includes("up"):
        case (0, _helpers.isKey)("down", event) && this.keydownItem.includes("down"):
          const focusableItems = this.getFocusableItems();
          const currentIndex = focusableItems.findIndex(item => item === event.target);
          const maxIndex = focusableItems.length - 1;
          let nextIndex;

          if ((0, _helpers.isKey)("up", event)) {
            nextIndex = currentIndex > 0 ? currentIndex - 1 : 0;
          } else {
            nextIndex = currentIndex < maxIndex ? currentIndex + 1 : maxIndex;
          }

          focusableItems[nextIndex].focus();
          event.preventDefault();
          event.stopPropagation();
          break;

        case (0, _helpers.isKey)("enter", event) && this.keydownItem.includes("enter"):
        case (0, _helpers.isKey)("space", event) && this.keydownItem.includes("space"):
          event.target.click();
          this.focus();
          event.preventDefault();
          break;

        case (0, _helpers.isKey)("tab", event) && this.keydownItem.includes("tab"):
        case (0, _helpers.isKey)("esc", event) && this.keydownItem.includes("esc"):
          this.hide();
          this.focus();
          event.preventDefault();
          break;
      }
    },

    onEscape() {
      this.hide();
    },

    show() {
      if (this.isDisabled || this.isReadonly || this.visible) {
        return;
      }

      this.visible = true;
      this.createPopper();
    },

    hide() {
      if (!this.visible) {
        return;
      }

      this.visible = false;
      this.animating = true;
      setTimeout(() => {
        this.animating = false;
      }, this.animationDuration);
    },

    focus() {
      this.$refs.trigger.focus();
    },

    getFocusableItems() {
      const focusableItems = [];

      for (const child of this.$refs.options.children) {
        if ((0, _helpers.isFocusable)(child)) {
          focusableItems.push(child);
        }
      }

      return focusableItems;
    },

    getElementHeight(node) {
      const computedStyle = getComputedStyle(node);

      if (!computedStyle.height) {
        return NaN;
      }

      return Math.ceil(parseFloat(computedStyle.height));
    },

    inputMatchesLabel(value) {
      return this.value && value === this.computeLabel(this.value);
    },

    inputMatchesLength(value) {
      return this.minLength === 0 || value && value.length >= this.minLength;
    },

    inputShouldShowSelect(value) {
      if (!this.autocomplete) {
        return true;
      }

      return this.inputMatchesLength(value) && !this.inputMatchesLabel(value);
    },

    computeLabel(option) {
      if (typeof option !== "object") {
        return this.inputValue;
      }

      return (0, _helpers.isFunction)(this.label) ? this.label(option) : (0, _helpers.getValueByPath)(option, this.label);
    }

  }
});

module.exports = _default;