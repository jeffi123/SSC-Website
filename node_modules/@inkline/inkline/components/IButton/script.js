"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
module.exports = void 0;

var _vue = require("vue");

var _index = _interopRequireDefault(require("@inkline/inkline/components/ILoader/index.vue"));

var _mixins = require("@inkline/inkline/mixins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const componentName = "IButton";

var _default = (0, _vue.defineComponent)({
  name: componentName,
  components: {
    ILoader: _index.default
  },
  mixins: [_mixins.LinkableMixin],
  inject: {
    buttonGroup: {
      default: () => ({})
    },
    form: {
      default: () => ({})
    },
    formGroup: {
      default: () => ({})
    }
  },
  props: {
    active: {
      type: Boolean,
      default: false
    },
    block: {
      type: Boolean,
      default: false
    },
    circle: {
      type: Boolean,
      default: false
    },
    color: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "color")
    },
    disabled: {
      type: Boolean,
      default: false
    },
    link: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    outline: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "button"
    },
    tabindex: {
      type: [Number, String],
      default: 0
    },
    size: {
      type: String,
      default: (0, _mixins.defaultPropValue)(componentName, "size"),
      validator: _mixins.sizePropValidator
    }
  },
  computed: {
    ariaBusy() {
      if (this.role !== "button") {
        return null;
      }

      return this.loading ? "true" : "false";
    },

    ariaDisabled() {
      if (this.role !== "button") {
        return null;
      }

      return this.disabled ? "true" : "false";
    },

    ariaPressed() {
      if (this.role !== "button") {
        return null;
      }

      return this.active ? "true" : "false";
    },

    classes() {
      return { ...(0, _mixins.colorVariantClass)(this),
        [`-${this.size}`]: Boolean(this.size),
        "-active": this.active,
        "-block": this.block,
        "-circle": this.circle,
        "-disabled": this.isDisabled,
        "-link": this.link,
        "-outline": this.outline
      };
    },

    isDisabled() {
      return this.disabled || this.buttonGroup.disabled || this.form.disabled || this.formGroup.disabled;
    },

    role() {
      return this.$attrs.to || this.$attrs.href ? "link" : "button";
    },

    tabIndex() {
      return this.isDisabled ? -1 : this.tabindex;
    }

  }
});

module.exports = _default;