import { defineComponent } from "vue";
import {
  defaultPropValue,
  colorVariantClass,
  sizePropValidator
} from "@inkline/inkline/mixins";
import { breakpointKeys, breakpoints } from "@inkline/inkline/constants";
import { debounce } from "@inkline/inkline/helpers";
const componentName = "IPagination";
export default defineComponent({
  name: componentName,
  props: {
    ariaLabel: {
      type: String,
      default: "Pagination"
    },
    color: {
      type: String,
      default: defaultPropValue(componentName, "color")
    },
    itemsPerPage: {
      type: Number,
      default: 20
    },
    itemsTotal: {
      type: Number,
      default: 0
    },
    limit: {
      type: [Number, Object],
      default() {
        return {
          xs: 3,
          sm: 5
        };
      }
    },
    quickLink: {
      type: Boolean,
      default: false
    },
    modelValue: {
      type: Number,
      default: 1
    },
    size: {
      type: String,
      default: defaultPropValue(componentName, "size"),
      validator: sizePropValidator
    }
  },
  emits: [
    "update:modelValue"
  ],
  data() {
    return {
      pageLimit: 5
    };
  },
  computed: {
    classes() {
      return {
        ...colorVariantClass(this),
        [`-${this.size}`]: Boolean(this.size)
      };
    },
    pageCount() {
      return Math.ceil(this.itemsTotal / this.itemsPerPage);
    },
    showQuickPrevious() {
      return this.pageCount > this.pageLimit && this.modelValue > this.pageLimit - (this.pageLimit - 1) / 2;
    },
    showQuickNext() {
      return this.pageCount > this.pageLimit && this.modelValue < this.pageCount - (this.pageLimit - 1) / 2;
    },
    pages() {
      const pages = [];
      if (this.showQuickPrevious && !this.showQuickNext) {
        const startPage = this.pageCount - (this.pageLimit - 2);
        for (let i = startPage; i < this.pageCount; i++) {
          pages.push(i);
        }
      } else if (!this.showQuickPrevious && this.showQuickNext) {
        for (let i = 2; i < this.pageLimit; i++) {
          pages.push(i);
        }
      } else if (this.showQuickPrevious && this.showQuickNext) {
        const offset = Math.floor(this.pageLimit / 2) - 1;
        for (let i = this.modelValue - offset; i <= this.modelValue + offset; i++) {
          pages.push(i);
        }
      } else {
        for (let i = 2; i < this.pageCount; i++) {
          pages.push(i);
        }
      }
      return pages;
    }
  },
  created() {
    this.debouncedOnWindowResize = debounce(this.onWindowResize, 250);
    if (typeof window !== "undefined") {
      window.addEventListener("resize", this.debouncedOnWindowResize);
      this.onWindowResize();
    }
  },
  unmounted() {
    if (typeof window !== "undefined") {
      window.removeEventListener("resize", this.debouncedOnWindowResize);
    }
  },
  methods: {
    next() {
      if (this.modelValue === this.pageCount) {
        return;
      }
      this.onClick(this.modelValue + 1);
    },
    quickNext() {
      if (!this.quickLink) {
        return;
      }
      const jumpTo = this.modelValue + (this.pageLimit - 2);
      this.onClick(jumpTo > this.pageCount ? this.pageCount : jumpTo);
    },
    previous() {
      if (this.modelValue === 1) {
        return;
      }
      this.onClick(this.modelValue - 1);
    },
    quickPrevious() {
      if (!this.quickLink) {
        return;
      }
      const jumpTo = this.modelValue - (this.pageLimit - 2);
      this.onClick(jumpTo < 1 ? 1 : jumpTo);
    },
    onClick(item) {
      this.$emit("update:modelValue", item);
    },
    onWindowResize() {
      if (typeof this.limit === "number") {
        this.pageLimit = this.limit;
        return this.pageLimit;
      }
      for (const breakpointKey of breakpointKeys.slice().reverse()) {
        if (this.limit.hasOwnProperty(breakpointKey) && (typeof window !== "undefined" && window.innerWidth >= breakpoints[breakpointKey][0])) {
          this.pageLimit = this.limit[breakpointKey];
          return this.pageLimit;
        }
      }
    }
  }
});
